SELECT
    date,
    id,
    name,
    value
FROM
(
    SELECT *
    FROM default.test
    HAVING id = 1
) AS test_view
WHERE id = 1
SETTINGS allow_experimental_analyzer = 0
SELECT
    __table1.date AS date,
    __table1.id AS id,
    __table1.name AS name,
    __table1.value AS value
FROM default.test_view AS __table1
WHERE __table1.id = 1
SETTINGS allow_experimental_analyzer = 1
Expression ((Project names + (Projection + (WHERE + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))))))))
Actions: INPUT : 1 -> date Date : 0
         INPUT : 2 -> name String : 1
         INPUT : 3 -> value Int64 : 2
         INPUT : 0 -> __table1.id Int8 : 3
         ALIAS date :: 0 -> __table2.date Date : 4
         ALIAS name :: 1 -> __table2.name String : 0
         ALIAS value :: 2 -> __table2.value Int64 : 1
         ALIAS __table1.id :: 3 -> id Int8 : 2
         ALIAS __table2.date :: 4 -> date Date : 3
         ALIAS __table2.name :: 0 -> name String : 4
         ALIAS __table2.value :: 1 -> value Int64 : 0
         ALIAS date :: 3 -> __table1.date Date : 1
         ALIAS name :: 4 -> __table1.name String : 3
         ALIAS value :: 0 -> __table1.value Int64 : 4
         ALIAS __table1.date :: 1 -> date Date : 0
         ALIAS __table1.name :: 3 -> name String : 1
         ALIAS __table1.value :: 4 -> value Int64 : 3
         FUNCTION materialize(date :: 0) -> materialize(date) Date : 4
         FUNCTION materialize(name :: 1) -> materialize(name) String : 0
         FUNCTION materialize(value :: 3) -> materialize(value) Int64 : 1
         ALIAS materialize(date) :: 4 -> date Date : 3
         ALIAS materialize(name) :: 0 -> name String : 4
         ALIAS materialize(value) :: 1 -> value Int64 : 0
         ALIAS date :: 3 -> __table1.date Date : 1
         ALIAS name :: 4 -> __table1.name String : 3
         ALIAS value :: 0 -> __table1.value Int64 : 4
         ALIAS __table1.date :: 1 -> date Date : 0
         ALIAS __table1.name :: 3 -> name String : 1
         ALIAS __table1.value :: 4 -> value Int64 : 3
Positions: 0 2 1 3
  Filter (((WHERE + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))))))[split])
  Filter column: equals(__table1.id, 1_UInt8) (removed)
  Actions: INPUT : 0 -> id Int8 : 0
           COLUMN Const(UInt8) -> 1_UInt8 UInt8 : 1
           ALIAS id :: 0 -> __table2.id Int8 : 2
           ALIAS __table2.id :: 2 -> id Int8 : 0
           ALIAS id :: 0 -> __table1.id Int8 : 2
           ALIAS __table1.id :: 2 -> id Int8 : 0
           FUNCTION materialize(id :: 0) -> materialize(id) Int8 : 2
           ALIAS materialize(id) :: 2 -> id Int8 : 0
           ALIAS id :: 0 -> __table1.id Int8 : 2
           FUNCTION equals(__table1.id : 2, 1_UInt8 :: 1) -> equals(__table1.id, 1_UInt8) UInt8 : 0
  Positions: 2 0
    ReadFromPreparedSource (Read from NullSource)
SELECT
    date,
    id,
    name,
    value
FROM
(
    SELECT *
    FROM default.test
    HAVING id = 2
) AS test_view
WHERE id = 2
SETTINGS allow_experimental_analyzer = 0
SELECT
    __table1.date AS date,
    __table1.id AS id,
    __table1.name AS name,
    __table1.value AS value
FROM default.test_view AS __table1
WHERE __table1.id = 2
SETTINGS allow_experimental_analyzer = 1
Expression ((Project names + (Projection + (WHERE + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))))))))
Actions: INPUT : 1 -> date Date : 0
         INPUT : 2 -> name String : 1
         INPUT : 3 -> value Int64 : 2
         INPUT : 0 -> __table1.id Int8 : 3
         ALIAS date :: 0 -> __table2.date Date : 4
         ALIAS name :: 1 -> __table2.name String : 0
         ALIAS value :: 2 -> __table2.value Int64 : 1
         ALIAS __table1.id :: 3 -> id Int8 : 2
         ALIAS __table2.date :: 4 -> date Date : 3
         ALIAS __table2.name :: 0 -> name String : 4
         ALIAS __table2.value :: 1 -> value Int64 : 0
         ALIAS date :: 3 -> __table1.date Date : 1
         ALIAS name :: 4 -> __table1.name String : 3
         ALIAS value :: 0 -> __table1.value Int64 : 4
         ALIAS __table1.date :: 1 -> date Date : 0
         ALIAS __table1.name :: 3 -> name String : 1
         ALIAS __table1.value :: 4 -> value Int64 : 3
         FUNCTION materialize(date :: 0) -> materialize(date) Date : 4
         FUNCTION materialize(name :: 1) -> materialize(name) String : 0
         FUNCTION materialize(value :: 3) -> materialize(value) Int64 : 1
         ALIAS materialize(date) :: 4 -> date Date : 3
         ALIAS materialize(name) :: 0 -> name String : 4
         ALIAS materialize(value) :: 1 -> value Int64 : 0
         ALIAS date :: 3 -> __table1.date Date : 1
         ALIAS name :: 4 -> __table1.name String : 3
         ALIAS value :: 0 -> __table1.value Int64 : 4
         ALIAS __table1.date :: 1 -> date Date : 0
         ALIAS __table1.name :: 3 -> name String : 1
         ALIAS __table1.value :: 4 -> value Int64 : 3
Positions: 0 2 1 3
  Filter (((WHERE + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))))))[split])
  Filter column: equals(__table1.id, 2_UInt8) (removed)
  Actions: INPUT : 0 -> id Int8 : 0
           COLUMN Const(UInt8) -> 2_UInt8 UInt8 : 1
           ALIAS id :: 0 -> __table2.id Int8 : 2
           ALIAS __table2.id :: 2 -> id Int8 : 0
           ALIAS id :: 0 -> __table1.id Int8 : 2
           ALIAS __table1.id :: 2 -> id Int8 : 0
           FUNCTION materialize(id :: 0) -> materialize(id) Int8 : 2
           ALIAS materialize(id) :: 2 -> id Int8 : 0
           ALIAS id :: 0 -> __table1.id Int8 : 2
           FUNCTION equals(__table1.id : 2, 2_UInt8 :: 1) -> equals(__table1.id, 2_UInt8) UInt8 : 0
  Positions: 2 0
    ReadFromPreparedSource (Read from NullSource)
SELECT id
FROM
(
    SELECT *
    FROM default.test
    HAVING id = 1
) AS test_view
WHERE id = 1
SETTINGS allow_experimental_analyzer = 0
SELECT __table1.id AS id
FROM default.test_view AS __table1
WHERE __table1.id = 1
SETTINGS allow_experimental_analyzer = 1
Expression ((Project names + Projection))
Actions: INPUT : 0 -> __table1.id Int8 : 0
         ALIAS __table1.id :: 0 -> id Int8 : 1
Positions: 1
  Filter ((WHERE + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))))))
  Filter column: equals(__table1.id, 1_UInt8) (removed)
  Actions: INPUT : 0 -> id Int8 : 0
           COLUMN Const(UInt8) -> 1_UInt8 UInt8 : 1
           ALIAS id :: 0 -> __table2.id Int8 : 2
           ALIAS __table2.id :: 2 -> id Int8 : 0
           ALIAS id :: 0 -> __table1.id Int8 : 2
           ALIAS __table1.id :: 2 -> id Int8 : 0
           FUNCTION materialize(id :: 0) -> materialize(id) Int8 : 2
           ALIAS materialize(id) :: 2 -> id Int8 : 0
           ALIAS id :: 0 -> __table1.id Int8 : 2
           FUNCTION equals(__table1.id : 2, 1_UInt8 :: 1) -> equals(__table1.id, 1_UInt8) UInt8 : 0
  Positions: 0 2
    ReadFromPreparedSource (Read from NullSource)
SELECT id
FROM
(
    SELECT *
    FROM default.test
    HAVING id = 1
) AS s
WHERE id = 1
SETTINGS allow_experimental_analyzer = 0
SELECT __table1.id AS id
FROM default.test_view AS __table1
WHERE __table1.id = 1
SETTINGS allow_experimental_analyzer = 1
Expression ((Project names + Projection))
Actions: INPUT : 0 -> __table1.id Int8 : 0
         ALIAS __table1.id :: 0 -> id Int8 : 1
Positions: 1
  Filter ((WHERE + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))))))
  Filter column: equals(__table1.id, 1_UInt8) (removed)
  Actions: INPUT : 0 -> id Int8 : 0
           COLUMN Const(UInt8) -> 1_UInt8 UInt8 : 1
           ALIAS id :: 0 -> __table2.id Int8 : 2
           ALIAS __table2.id :: 2 -> id Int8 : 0
           ALIAS id :: 0 -> __table1.id Int8 : 2
           ALIAS __table1.id :: 2 -> id Int8 : 0
           FUNCTION materialize(id :: 0) -> materialize(id) Int8 : 2
           ALIAS materialize(id) :: 2 -> id Int8 : 0
           ALIAS id :: 0 -> __table1.id Int8 : 2
           FUNCTION equals(__table1.id : 2, 1_UInt8 :: 1) -> equals(__table1.id, 1_UInt8) UInt8 : 0
  Positions: 0 2
    ReadFromPreparedSource (Read from NullSource)
